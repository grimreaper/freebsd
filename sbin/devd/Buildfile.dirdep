# This file is automatically generated. DO NOT EDIT!
.if !defined(NODIRDEP)
# DIRDEP= gnu/lib/csu gnu/lib/libgcc gnu/lib/libstdc++ gnu/lib/libstdc++/base gnu/lib/libstdc++/bits gnu/lib/libstdc++/debug gnu/lib/libstdc++/ext gnu/lib/libstdc++/march gnu/lib/libstdc++/std gnu/lib/libstdc++/target gnu/lib/libstdc++/thr gnu/lib/libsupc++ include include/machine lib/csu/MACHINE_ARCH lib/libc lib/libutil lib/msun stage sys/MACHINE_ARCH/include sys/net sys/sys usr.bin/lex/lib
.if empty(D_INC_DONE:Mgnu/lib/csu)
D_INC_DONE+= gnu/lib/csu
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/csu/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/csu/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libgcc)
D_INC_DONE+= gnu/lib/libgcc
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libgcc/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libgcc/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++)
D_INC_DONE+= gnu/lib/libstdc++
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/base)
D_INC_DONE+= gnu/lib/libstdc++/base
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/base/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/base/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/bits)
D_INC_DONE+= gnu/lib/libstdc++/bits
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/bits/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/bits/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/debug)
D_INC_DONE+= gnu/lib/libstdc++/debug
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/debug/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/debug/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/ext)
D_INC_DONE+= gnu/lib/libstdc++/ext
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/ext/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/ext/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/march)
D_INC_DONE+= gnu/lib/libstdc++/march
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/march/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/march/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/std)
D_INC_DONE+= gnu/lib/libstdc++/std
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/std/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/std/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/target)
D_INC_DONE+= gnu/lib/libstdc++/target
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/target/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/target/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libstdc++/thr)
D_INC_DONE+= gnu/lib/libstdc++/thr
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libstdc++/thr/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libstdc++/thr/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mgnu/lib/libsupc++)
D_INC_DONE+= gnu/lib/libsupc++
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/gnu/lib/libsupc++/Buildfile.dirdep)
.include "${.SRCTOP}/gnu/lib/libsupc++/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Minclude)
D_INC_DONE+= include
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/include/Buildfile.dirdep)
.include "${.SRCTOP}/include/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Minclude/machine)
D_INC_DONE+= include/machine
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/include/machine/Buildfile.dirdep)
.include "${.SRCTOP}/include/machine/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mlib/libc)
D_INC_DONE+= lib/libc
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/lib/libc/Buildfile.dirdep)
.include "${.SRCTOP}/lib/libc/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mlib/libutil)
D_INC_DONE+= lib/libutil
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/lib/libutil/Buildfile.dirdep)
.include "${.SRCTOP}/lib/libutil/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mlib/msun)
D_INC_DONE+= lib/msun
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/lib/msun/Buildfile.dirdep)
.include "${.SRCTOP}/lib/msun/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Mstage)
D_INC_DONE+= stage
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/stage/Buildfile.dirdep)
.include "${.SRCTOP}/stage/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Msys/net)
D_INC_DONE+= sys/net
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/sys/net/Buildfile.dirdep)
.include "${.SRCTOP}/sys/net/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Msys/sys)
D_INC_DONE+= sys/sys
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/sys/sys/Buildfile.dirdep)
.include "${.SRCTOP}/sys/sys/Buildfile.dirdep"
.endif
.endif

.if empty(D_INC_DONE:Musr.bin/lex/lib)
D_INC_DONE+= usr.bin/lex/lib
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/usr.bin/lex/lib/Buildfile.dirdep)
.include "${.SRCTOP}/usr.bin/lex/lib/Buildfile.dirdep"
.endif
.endif

.for t in ${MACHINE_LIST}
_d=lib/csu/MACHINE_ARCH
.if empty(D_INC_DONE:M${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g})
D_INC_DONE+= ${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep)
.include "${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep"
.endif
.endif

.endfor
.for t in ${MACHINE_LIST}
_d=sys/MACHINE_ARCH/include
.if empty(D_INC_DONE:M${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g})
D_INC_DONE+= ${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}
D_INC_DONE:= ${D_INC_DONE}
.if exists(${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep)
.include "${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep"
.endif
.endif

.endfor
.endif

.for t in ${MACHINE_LIST}
D_TGTS_${t}=
.endfor

.if !defined(NODIRDEP)
_MACHINE_LIST:= ${MACHINE_LIST}
.if exists(${.SRCTOP}/gnu/lib/csu/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/csu/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libgcc/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libgcc/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/base/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/base/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/bits/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/bits/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/debug/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/debug/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/ext/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/ext/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/march/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/march/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/std/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/std/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/target/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/target/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libstdc++/thr/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libstdc++/thr/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/gnu/lib/libsupc++/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/gnu/lib/libsupc++/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/include/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/include/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/include/machine/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/include/machine/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/lib/libc/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/lib/libc/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/lib/libutil/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/lib/libutil/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/lib/msun/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/lib/msun/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/stage/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/stage/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/sys/net/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/sys/net/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/sys/sys/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/sys/sys/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.if exists(${.SRCTOP}/usr.bin/lex/lib/Buildfile.dirdep)
.for _t in ${_MACHINE_LIST}
D_TGTS_${_t}+= ${.OBJROOT}/${_t}/usr.bin/lex/lib/all
D_TGTS_${_t}:= ${D_TGTS_${_t}}
.endfor
.endif

.for t in ${_MACHINE_LIST}
_d=lib/csu/MACHINE_ARCH
.if exists(${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep)
D_TGTS_${t}+= ${.OBJROOT}/${t}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/all
D_TGTS_${t}:= ${D_TGTS_${t}}
.endif

.endfor
.for t in ${_MACHINE_LIST}
_d=sys/MACHINE_ARCH/include
.if exists(${.SRCTOP}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/Buildfile.dirdep)
D_TGTS_${t}+= ${.OBJROOT}/${t}/${_d:S,MACHINE_ARCH,${MACHINE_ARCH.${t}},g}/all
D_TGTS_${t}:= ${D_TGTS_${t}}
.endif

.endfor

.endif
.for t in ${MACHINE_LIST}
${.OBJROOT}/${t}/sbin/devd/all : ${D_TGTS_${t}} .PHONY
	echo Checking ${.OBJROOT}/${t}/sbin/devd
	cd ${.SRCTOP}/sbin/devd && MACHINE=${t} ${MAKE} ${.MAKEFLAGS:NMACHINE=*:N-DALLMACHINES} all
.endfor
