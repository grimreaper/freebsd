#include "IA64.h"
#include "IA64TargetMachine.h"

#include "llvm/DerivedTypes.h"
#include "llvm/Function.h"
#include "llvm/Intrinsics.h"
#include "llvm/CallingConv.h"
#include "llvm/Constants.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Target/TargetLowering.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

namespace {

  class IA64DAGToDAGISel : public SelectionDAGISel {
    const IA64TargetLowering &Lowering;
    const IA64Subtarget &Subtarget;

  public:
    IA64DAGToDAGISel(IA64TargetMachine &TM, CodeGenOpt::Level OptLevel) :
        SelectionDAGISel(TM, OptLevel),
        Lowering(*TM.getTargetLowering()),
        Subtarget(*TM.getSubtargetImpl()) { }

    virtual const char *getPassName() const {
      return "IA64 DAG->DAG Instruction Selection";
    }

// Include the pieces autogenerated from the target description.
#include "IA64GenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
  };

}

FunctionPass *
llvm::createIA64ISelPass(IA64TargetMachine &TM, CodeGenOpt::Level OptLevel)
{
  return new IA64DAGToDAGISel(TM, OptLevel);
}


SDNode *
IA64DAGToDAGISel::Select(SDNode *Node)
{
  DebugLoc dl = Node->getDebugLoc();

  // Dump information about the Node being selected
  errs() << "Selecting: ";
  Node->dump(CurDAG);
  errs() << "\n";

  SDNode *ResNode = SelectCode(Node);

  errs() << "=> ";
  if (ResNode == NULL || ResNode == Node)
    Node->dump(CurDAG);
  else
    ResNode->dump(CurDAG);
  errs() << "\n";

  return ResNode;
}
