#!/bin/sh
## NAME:
##       jgetsrc - do a subset checkout, using jbuild dependencies
##
## SYNOPSIS:
##       jgetsrc [options] [<dir1>] [<dir2>] .....
##
## DESCRIPTION:
##
##        Do a subset checkout.  For a given set of directories [<dir1>], etc.
##        checkout those directories.  In each directory, look in Buildfile.dep,
##        and checkout the directories listed in
##        SRCDIRDEP.  For directories listed in DIRDEP, refer to them
##        in a backing stage tree specified with -B.  Create a "shared" symlink
##        to the shared stage tree.
##
## OPTIONS:
##
##        -h
##        --help
##           This manual page is emitted.
##
##        -B "path"
##            Specify "path" to backing stage tree for subset checkout.
##            If a tree exists:
##               /usr/mytree/obj
##               /usr/mytree/obj/stage
##               /usr/mytree/src
##           
##            then use -B /usr/mytree
##           
##        -S
##           This is a second level process to get additional dirs in SRCDIRDEP.
##

GET_EXTRA=0

ShowHelp()
{
    grep ^## $0 | sed -e 's/^##//' | ${PAGER}
    exit 0
}


# Here is a trick to make sure that ssh-agent is running before
# we start doing a bunch of svn operations over ssh.

# Try to list identities in ssh-agent
ssh-add -l > /dev/null 2>&1
ret=$?
if [ $ret -eq 2 ]
then
	# Couldn't open a connection to ssh-agent,
	# so let's start one, and re-execute this script under ssh-agent.
	exec ssh-agent $0 "$@"
elif [ $ret -eq 1 ]
then
	# Couldn't find passphrase in ssh-agent, so let's
	# prompt user for to add passphrase to ssh-agent
	ssh-add
	if [ $? -ne 0 ]
	then
		# If user does not have a valid ssh key in $HOME/.ssh,
		# then ssh-add will fail, but not print any error messages to stdout.
		echo "ERROR: ssh-add FAILED.  You may see password prompt"
		echo "multiple times, and possibly time out or fail."
		echo "Please set up ssh-agent properly to avoid this:"
		echo ""

		exit 1
	fi
fi

PAGER=${PAGER:-more}
# Work around X11 forwarding errors
unset DISPLAY

# parse flags
while getopts "B:Sh" my_opt
do
	case $my_opt in
	B) BACKING_TREE=$OPTARG ;;
	S) GET_EXTRA=1 ;;
	h) ShowHelp ;;
	[?]) echo "Bad Option"; ShowHelp ;;
	esac
done
shift $(($OPTIND-1))

if [ "$1" = "--help" ]
then
	ShowHelp
	exit 0
fi

if [ -z "${BACKING_TREE}" ]
then
	echo "Specify backing tree with -B"
	echo "See --help" 
	exit 1
fi

if [ ! -d "${BACKING_TREE}"/obj/stage  ]
then
	echo "${BACKING_TREE} does not point to a directory with a valid obj/stage tree"
	echo "See --help"
	exit 1
fi

dirs=$*

ROOTDIR=`pwd`

testdir=$ROOTDIR
while [ $testdir != "/" ]; do
	if [ -f $testdir/src/bld/sys.mk ]; then
		ROOTDIR=$testdir
		break
	fi
	testdir=`dirname $testdir`
done

SVNLOG=$ROOTDIR/svn.log
MORELOG=$ROOTDIR/more.log

cd $ROOTDIR

if [ ! -d shared -a ! -h shared ]; then
	echo "Creating link ${BACKING_TREE}/obj -> shared"
	ln -s ${BACKING_TREE}/obj shared
fi

JSVN=svn+ssh://danai-29.juniper.net/c/cvs2svn/svn/repos/junos-2008/branches/jbuild

rm -f $SVNLOG $MORELOG
touch $SVNLOG $MORELOG

svn co -q $JSVN/src --depth files
cd src
svn co -q $JSVN/src/bld --depth files
svn co -q $JSVN/src/stage --depth files


for d in $dirs
do
	dd=`echo $d | sed -e "s/\// /g"`
	num=`echo $dd | wc -w`
	svnd=$JSVN
	report=.
	cd $ROOTDIR
	i=0
	for x in $dd
	do
		if [ $i -eq 0 -a $x != "src" ]; then
			echo "Ignoring directory path which doesn't start with 'src': $d"
			break
		fi
		svnd=$svnd/$x
		report=$report/$x
		i=`expr $i + 1`
		xx=`pwd`
		echo "Z $xx" >> $SVNLOG
		if [ $i -eq $num -a ${GET_EXTRA} -eq 0 ]; then
			echo "Checking out: $report (this dir and all below)"
			svn co $svnd --depth infinity >> $SVNLOG
		elif [ ! -d $x ]; then
			echo "Checking out: $report (just this dir)"
			svn co $svnd --depth files >> $SVNLOG
		fi
		cd $x
	done
done

cd $ROOTDIR
dname=$ROOTDIR
buildfiledep=

while read thing name
do
	if [ $thing = "A" ]
	then
		fname=`basename $name`
		if [ $fname = "Buildfile.dep" ]
		then
			buildfiledep="$buildfiledep $dname/$name"
		fi
	elif [ $thing = "Z" ]
	then
		dname=$name
	fi
done < $SVNLOG

for f in $buildfiledep
do
	while read line
	do
		srcdirdep=`echo "$line" | grep SRCDIRDEP`
		for d in $srcdirdep
		do
			if [ $d = "SRCDIRDEP" ]
			then
			elif [ $d = "=" ]
			then
			elif [ ! -d $ROOTDIR/src/$d ]
			then
				echo "src/$d" >> $MORELOG
			fi
		done
	done < $f
done

sort -u $MORELOG > tmp
mv tmp $MORELOG
moredirs=

while read fname
do
	moredirs="$moredirs $fname"
done < $MORELOG

rm -f $SVNLOG
rm -f $MORELOG

if [ "x$moredirs" != x ]
then
	echo "Need to check out additional directories due to source dependencies..."
	exec $0 -S -B "${BACKING_TREE}" $moredirs
fi
